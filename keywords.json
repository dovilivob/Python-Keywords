{
  "Glossary": [
    "Indentation",
    "Comments",
    "Multi Line Comments",
    "Creating Variables",
    "Variable Names",
    "Assign Values to Multiple Variables",
    "Output Variables",
    "String Concatenation",
    "Global Variables",
    "Built-In Data Types",
    "Getting Data Type",
    "Setting Data Type",
    "Numbers",
    "Int",
    "Float",
    "Complex",
    "Type Conversion",
    "Random Number",
    "Specify a Variable Type",
    "String Literals",
    "Assigning a String to a Variable",
    "Multiline Strings",
    "Strings are Arrays",
    "Slicing a String",
    "Negative Indexing on a String",
    "String Length",
    "Check In String",
    "Format String",
    "Escape Characters",
    "Boolean Values",
    "Evaluate Booleans",
    "Return Boolean Value",
    "Operators",
    "Arithmetic Operators",
    "Assignment Operators",
    "Comparison Operators",
    "Logical Operators",
    "Identity Operators",
    "Membership Operators",
    "Bitwise Operators",
    "Lists",
    "Access List Items",
    "Change List Item",
    "Loop Through List Items",
    "List Comprehension",
    "Check if List Item Exists",
    "List Length",
    "Add List Items",
    "Remove List Items",
    "Copy a List",
    "Join Two Lists",
    "Tuple",
    "Access Tuple Items",
    "Change Tuple Item",
    "Loop List Items",
    "Check if Tuple Item Exists",
    "Tuple Length",
    "Tuple With One Item",
    "Remove Tuple Items",
    "Join Two Tuples",
    "Set",
    "Access Set Items",
    "Add Set Items",
    "Loop Set Items",
    "Check if Set Item Exists",
    "Set Length",
    "Remove Set Items",
    "Join Two Sets",
    "Dictionary",
    "Access Dictionary Items",
    "Change Dictionary Item",
    "Loop Dictionary Items",
    "Check if Dictionary Item Exists",
    "Dictionary Length",
    "Add Dictionary Item",
    "Remove Dictionary Items",
    "Copy Dictionary",
    "Nested Dictionaries",
    "If Statement",
    "If Indentation",
    "Elif",
    "Else",
    "Shorthand If",
    "Shorthand If Else",
    "If AND",
    "If OR",
    "Nested If",
    "The pass Keyword in If",
    "While",
    "While Break",
    "While Continue",
    "While Else",
    "For",
    "Loop Through a String",
    "For Break",
    "For Continue",
    "Looping Through a rangee",
    "For Else",
    "Nested Loops",
    "For pass",
    "Function",
    "Call a Function",
    "Function Arguments",
    "*args",
    "Keyword Arguments",
    "*kwargs",
    "Default Parameter Value",
    "Passing a List as an Argument",
    "Function Return Value",
    "The pass Statement i Functions",
    "Function Recursion",
    "Lambda Function",
    "Why Use Lambda Functions",
    "Array",
    "What is an Array",
    "Access Arrays",
    "Array Length",
    "Looping Array Elements",
    "Add Array Element",
    "Remove Array Element",
    "Array Methods",
    "Class",
    "Create Class",
    "The Class __init__() Function",
    "Object Methods",
    "self",
    "Modify Object Properties",
    "Delete Object Properties",
    "Delete Object",
    "Class pass Statement",
    "Create Parent Class",
    "Create Child Class",
    "Create the __init__() Function",
    "super Function",
    "Add Class Properties",
    "Add Class Methods",
    "Iterators",
    "Iterator vs Iterable",
    "Loop Through an Iterator",
    "Create an Iterator",
    "StopIteration",
    "Global Scope",
    "Global Keyword",
    "Create a Module",
    "Variables in Modules",
    "Renaming a Module",
    "Built-in Modules",
    "Using the dir() Function",
    "Import From Module",
    "Datetime Module",
    "Date Output",
    "Create a Date Object",
    "The strftime Method",
    "Date Format Codes",
    "JSON",
    "Parse JSON",
    "Convert into JSON",
    "Format JSON",
    "Sort JSON",
    "RegEx Module",
    "RegEx Functions",
    "Metacharacters in RegEx",
    "RegEx Special Sequences",
    "RegEx Sets",
    "RegEx Match Object",
    "Install PIP",
    "PIP Packages",
    "PIP Remove Package",
    "Error Handling",
    "Handle Many Exceptions",
    "Try Else",
    "Try Finally",
    "raise"
  ],
  "Normal": {
    "Value": ["True", "False", "None"],
    "Operator": ["and", "or", "not", "in", "is"],
    "Control-Flow": ["if", "elif", "else"],
    "Iteration": [
      "for",
      "while",
      "break",
      "continue",
      "else"
    ],
    "Structure": [
      "@lambda",
      "def",
      "class",
      "with",
      "as",
      "pass"
    ],
    "Returning": ["return", "yield"],
    "Import": ["import", "from", "as"],
    "Exception-Handling": [
      "try",
      "except",
      "raise",
      "finally",
      "else",
      "assert"
    ],
    "Asynchronous-Programming": [
      "async",
      "await"
    ],
    "Variable-Handling": [
      "del",
      "global",
      "nonlocal"
    ]
  },
  "Function": {
    "Built-in-Function": [
      "@id()",
      "@type()",
      "abs()",
      "all()",
      "any()",
      "ascii()",
      "bin()",
      "bool()",
      "bytearray()",
      "bytes()",
      "callable()",
      "chr()",
      "classmethod()",
      "compile()",
      "complex()",
      "delattr()",
      "dict()",
      "dir()",
      "divmod()",
      "enumerate()",
      "eval()",
      "exec()",
      "filter()",
      "float()",
      "format()",
      "frozenset()",
      "getattr()",
      "globals()",
      "hasattr()",
      "hash()",
      "help()",
      "hex()",
      "input()",
      "int()",
      "isinstance()",
      "issubclass()",
      "iter()",
      "len()",
      "list()",
      "locals()",
      "map()",
      "max()",
      "memoryview()",
      "min()",
      "next()",
      "object()",
      "oct()",
      "open()",
      "ord()",
      "pow()",
      "print()",
      "property()",
      "range()",
      "repr()",
      "reversed()",
      "round()",
      "set()",
      "setattr()",
      "slice()",
      "sorted()",
      "staticmethod()",
      "str()",
      "sum()",
      "super()",
      "tuple()",
      "vars()",
      "zip()"
    ],
    "Dictionary-Method": [
      "clear()",
      "copy()",
      "fromkeys()",
      "get()",
      "items()",
      "keys()",
      "pop()",
      "popitem()",
      "setdefault()",
      "update()",
      "values()"
    ],
    "File-Method": [
      "close()",
      "fileno()",
      "flush()",
      "isatty()",
      "read()",
      "readable()",
      "readline()",
      "readlines()",
      "seek()",
      "seekable()",
      "tell()",
      "truncate()",
      "writable()",
      "write()",
      "writelines()"
    ],
    "List-Method": [
      "append()",
      "clear()",
      "copy()",
      "count()",
      "extend()",
      "index()",
      "insert()",
      "pop()",
      "remove()",
      "reverse()",
      "sort()"
    ],
    "Set-Method": [
      "add()",
      "clear()",
      "copy()",
      "difference()",
      "difference_update()",
      "discard()",
      "intersection()",
      "intersection_update()",
      "isdisjoint()",
      "issubset()",
      "issuperset()",
      "pop()",
      "remove()",
      "symmetric_difference()",
      "symmetric_difference_update()",
      "union()",
      "update()"
    ],
    "String-Method": [
      "capitalize()",
      "casefold()",
      "center()",
      "count()",
      "encode()",
      "endswith()",
      "expandtabs()",
      "find()",
      "format()",
      "index()",
      "isalnum()",
      "isalpha()",
      "isascii()",
      "isdecimal()",
      "isdigit()",
      "isidentifier()",
      "islower()",
      "isnumeric()",
      "isprintable()",
      "isspace()",
      "istitle()",
      "isupper()",
      "join()",
      "ljust()",
      "lower()",
      "lstrip()",
      "maketrans()",
      "partition()",
      "replace()",
      "rfind()",
      "rindex()",
      "rjust()",
      "rpartition()",
      "rsplit()",
      "rstrip()",
      "split()",
      "splitlines()",
      "startswith()",
      "strip()",
      "swapcase()",
      "title()",
      "translate()",
      "upper()",
      "zfill()"
    ],
    "Tuple-Method": ["count()", "index()"]
  },
  "Module": {
    "Random": [
      "seed()",
      "getstate()",
      "setstate()",
      "getrandbits()",
      "randrange()",
      "randint()",
      "choice()",
      "choices()",
      "shuffle()",
      "sample()",
      "random()",
      "uniform()",
      "triangular()"
    ],
    "Requests": [
      "delete(url, args)",
      "get(url, params, args)",
      "head(url, args)",
      "post(url, data, json, args)"
    ],
    "Math": [
      "math.acos()",
      "math.acosh()",
      "math.asin()",
      "math.asinh()",
      "math.atan()",
      "math.atan2()",
      "math.atanh()",
      "math.ceil()",
      "math.comb()",
      "math.copysign()",
      "math.cos()",
      "math.cosh()",
      "math.degrees()",
      "math.dist()",
      "math.erf()",
      "math.erfc()",
      "math.exp()",
      "math.expm1()",
      "math.fabs()",
      "math.factorial()",
      "math.floor()",
      "math.fmod()",
      "math.frexp()",
      "math.fsum()",
      "math.gamma()",
      "math.gcd()",
      "math.hypot()",
      "math.isclose()",
      "math.isfinite()",
      "math.isinf()",
      "math.isnan()",
      "math.isqrt()",
      "math.ldexp()",
      "math.lgamma()",
      "math.log()",
      "math.log10()",
      "math.log1p()",
      "math.log2()",
      "math.perm()",
      "math.pow()",
      "math.prod()",
      "math.radians()",
      "math.remainder()",
      "math.sin()",
      "math.sinh()",
      "math.sqrt()",
      "math.tan()",
      "math.tanh()",
      "math.trunc()",
      "math.e",
      "math.inf",
      "math.nan",
      "math.pi",
      "math.tau"
    ],
    "CMath": [
      "cmath.acos(x)",
      "cmath.acosh(x)",
      "cmath.asin(x)",
      "cmath.asinh(x)",
      "cmath.atan(x)",
      "cmath.atanh(x)",
      "cmath.cos(x)",
      "cmath.cosh(x)",
      "cmath.exp(x)",
      "cmath.isclose()",
      "cmath.isfinite(x)",
      "cmath.isinf(x)",
      "cmath.isnan(x)",
      "cmath.log(x[, base])",
      "cmath.log10(x)",
      "cmath.phase()",
      "cmath.polar()",
      "cmath.rect()",
      "cmath.sin(x)",
      "cmath.sinh(x)",
      "cmath.sqrt(x)",
      "cmath.tan(x)",
      "cmath.tanh(x)",
      "cmath.e",
      "cmath.inf",
      "cmath.infj",
      "cmath.nan",
      "cmath.nanj",
      "cmath.pi",
      "cmath.tau"
    ]
  }
}
